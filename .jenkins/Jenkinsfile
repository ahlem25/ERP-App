def ecrServices = new HashMap()

pipeline {
    agent {
        label {
            label ''
            customWorkspace("workspace/${env.JOB_NAME}")
        }
    }
    parameters {
        booleanParam(name: 'DEPLOY_TO_EKS', defaultValue: true, description: 'Used to deploy all services in AWS EKS.')
        booleanParam(name: 'SKIP_TESTS', defaultValue: true, description: 'Used to skip tests.')
        booleanParam(name: 'SKIP_SONARQUBE', defaultValue: true, description: 'Used to skip SonarQube analysis.')
        choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'pprd', 'prod'], description: 'Select the environment')
    }
    environment {
        ECR_PRIVATE_REGISTRY_URL = "590184116223.dkr.ecr.eu-west-3.amazonaws.com"
        AWS_DEFAULT_REGION = "eu-west-3"
        CREDENTIALS_ID = "aws-credentials"
        EKS_CLUSTER = "erp-app-cluster"
        EKS_NAMESPACE = "erp-${params.ENVIRONMENT}"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        skipStagesAfterUnstable()
        ansiColor('xterm')
        timestamps()
    }

    stages {
        stage('Initialisation') {
            steps {
                script {
                    echo 'Step 1: Retrieving changelist and revision numbers from POM file'
                    env.REVISION = readMavenPom().getProperties().getProperty("revision")
                    env.CHANGELIST = readMavenPom().getProperties().getProperty("changelist")

                    if (env.CHANGELIST == "-SNAPSHOT") {
                        env.DOCKER_REG_ENV = 'stages'
                        if (env.BRANCH_NAME.contains('RC_') || env.BRANCH_NAME.contains('hotfix_')) {
                            // We're on a branch destined to be delivered
                            env.POM_VERSION = "${env.REVISION}${env.CHANGELIST}"
                        } else {
                            // We're on a separate branch in snapshot, use the branch name
                            env.POM_VERSION = "${env.BRANCH_NAME}${env.CHANGELIST}".replace('/','_')
                        }
                    } else if (env.CHANGELIST == "-RELEASE") {
                        env.DOCKER_REG_ENV = 'releases'
                        if (env.BRANCH_NAME.contains('RC_') || env.BRANCH_NAME.contains('hotfix_')) {
                            env.POM_VERSION = "${env.REVISION}${env.CHANGELIST}"
                        } else {
                            error "The branch cannot be a RELEASE branch, please create a RC_ or a hotfix_"
                        }
                    } else {
                        error "The changelist must be either -SNAPSHOT or -RELEASE"
                    }

                    echo "✅ This version is: ${env.POM_VERSION}"
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${CREDENTIALS_ID}"]]) {
                        loginToAWSAndECR(env.AWS_DEFAULT_REGION, env.ECR_PRIVATE_REGISTRY_URL)
                    }
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building the ERP project...'
                sh "mvn -am -amd versions:set -DnewVersion=${env.POM_VERSION}"
                sh "mvn -am -amd clean install -DskipTests"
            }
        }

        stage('Unit Test') {
            when {
                expression { return !params.SKIP_TESTS }
            }
            steps {
                echo 'Running unit tests...'
                sh "mvn clean test -Dtest=**/*UT.java"
            }
            post {
                always {
                    script {
                        try {
                            // Collects unit test reports
                            junit '**/target/surefire-reports/*.xml'
                            // Generate and archive the unit test report in HTML
                            sh 'mvn surefire-report:report'
                            archiveArtifacts artifacts: 'target/site/*.html', fingerprint: true
                        } catch (Exception e) {
                            echo "No test reports found. Skipping test results publishing."
                        }
                    }
                }
                failure {
                    echo 'Unit tests failed!'
                }
            }
        }

        stage('Integration Test') { 
            when {
                expression { return !params.SKIP_TESTS }
            }
            steps {
                echo 'Running integration tests...'
                sh "mvn -DskipUTs -DfailIfNoTests=false -Dgroups=IT verify -Dincludes=**/*IT.java -Dfailsafe.includes=**/*IT.java"
            }
            post {
                always {
                    script {
                        try {
                            // Collects integration test reports
                            junit '**/target/failsafe-reports/*.xml'
                            // Generate and archive the integration test report in HTML
                            sh 'mvn failsafe:report'
                            archiveArtifacts artifacts: 'target/site/*.html', fingerprint: true
                        } catch (Exception e) {
                            echo "No test reports found. Skipping test results publishing."
                        }
                    }
                }
                failure {
                    echo 'Integration tests failed!'
                }
            }
        }

        stage('SonarQube Analysis') {
            when {
                expression { return !params.SKIP_SONARQUBE }
            }
            steps {
                script {
                    echo 'Running static code analysis...'
                    try{
						sh "mvn clean verify sonar:sonar \
                      -Dsonar.projectKey=erp-backend \
                      -Dsonar.host.url=http://13.38.181.68:9000 \
                      -Dsonar.login=06349f961e402982d41a1409dd533a32192ab729"
                    }catch (Exception e) {
                        echo "SonarQube scan impossible."
                    }
                }
            }
        }

        stage('Build & push images') {
            steps {
                script {
                    echo 'Find Jar files for ERP services...'
                    def erp_services = [
                        "erp-service-discovery",
                        "erp-config", 
                        "erp-api-gateway",
                        "erp-user-service",
                        "erp-product-service",
                        "erp-inventory-service",
                        "erp-supplier-service",
                        "erp-order-service",
                        "erp-client-service",
                        "erp-payment-service",
                        "erp-billing-service",
                        "erp-sales-service",
                        "erp-dashboard-service",
                        "erp-scheduler-service"
                    ]
                    
                    def jar_files = []
                    erp_services.each { service ->
                        sh(script: """find ./${service}/ -name '*.jar'""", returnStdout: true).trim().split('\n').each { jar_files << it }
                    }

                    echo 'Building, tagging & Push the Docker Image to AWS private registry (AWS ECR) ...'
                    def dockerTasks = jar_files.collectEntries{jar_file -> ["${jar_file.split('/')[1]}": {
                        def service_name = jar_file.split('/')[1]
                        def jar_file_path = jar_file.split('/' + service_name)[1]
                        def ecrRepoName = "${service_name}-${env.DOCKER_REG_ENV}"
                        def ecrRepoURL = "${env.ECR_PRIVATE_REGISTRY_URL}/${ecrRepoName}"
                        ensureEcrRepositoryExists("${ecrRepoName}")
                        echo "🚀 Building Docker image for ${service_name} ..."
                        sh "docker build -t '${ecrRepoURL}:${env.POM_VERSION}' -f ./Dockerfile --no-cache --build-arg JAR_FILE=${jar_file_path} ./${service_name}"
                        echo "pushing image ${service_name}:${env.POM_VERSION}"
                        deleteImageWithSameTagBeforePushDocker(env.AWS_DEFAULT_REGION, ecrRepoURL, ecrRepoName, env.POM_VERSION)
                        sh "docker push '${ecrRepoURL}:${env.POM_VERSION}'"
                        echo "✅ ${service_name} has been pushed to ECR repository."
                        ecrServices.put(service_name, "${ecrRepoURL}:${env.POM_VERSION}")
                        }]
                    }
                    parallel dockerTasks
                }
            }
        }

        stage('Check/Create EKS Namespace') {
            when {
                expression { return params.DEPLOY_TO_EKS }
            }
            steps {
                script {
                    echo "🔍 Checking if namespace ${env.EKS_NAMESPACE} exists..."
                    def namespaceExists = sh(
                        script: "kubectl get namespace ${env.EKS_NAMESPACE} 2>/dev/null",
                        returnStatus: true
                    )
                    
                    if (namespaceExists != 0) {
                        echo "⚡ Creating namespace ${env.EKS_NAMESPACE}..."
                        sh "kubectl create namespace ${env.EKS_NAMESPACE}"
                        echo "✅ Namespace ${env.EKS_NAMESPACE} created successfully."
                    } else {
                        echo "✅ Namespace ${env.EKS_NAMESPACE} already exists."
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            when {
                expression { return params.DEPLOY_TO_EKS }
            }
            steps {
                script {
                    try {
                        echo "🔄 Start deploying ERP services to EKS."
                        println ecrServices
                        // Deploy foundational services: MySQL and Keycloak
                        createOrUpdateMySQL("mysql-${params.ENVIRONMENT}", env.EKS_NAMESPACE)
                        createOrUpdateKeycloak("keycloak-${params.ENVIRONMENT}", env.EKS_NAMESPACE)
                        ecrServices.each { service, imageUrl ->
                            println "$service: $imageUrl"
                            def serviceName = "${service}-${params.ENVIRONMENT}"
                            def deploymentName = "${serviceName}-deployment"
                            
                            // Create or update deployment
                            createOrUpdateKubernetesDeployment(serviceName, imageUrl, env.EKS_NAMESPACE)
                            
                            // Create or update service
                            createOrUpdateKubernetesService(serviceName, env.EKS_NAMESPACE)
                            
                            echo "🔄 Deploying EKS service: ${serviceName}"
                        }
                        echo "✅ All ERP services have been deployed successfully."
                    } catch (Exception e) {
                        echo "❌ Deployment failed! Initiating rollback..."
                        error("Deployment failed. Check logs for details.")
                    }
                }
            }
        }
    }

    post {
        always {
            script{
                if (getContext(hudson.FilePath)) {
                    // Suppression du workspace jenkins
                    deleteDir()
                    // Clean up the Docker system in order to tackle it.
                    sh "docker image ls"
                    sh("sudo sh -c 'yes | docker system prune -a'")
                }
            }
        }
    }
}

def loginToAWSAndECR(String awsRegion, String ecrRepo){
    try{
        // Execute shell commands for AWS authentication and Docker login
        sh """
            echo "🔐 Logging in to AWS ECR..."
            aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${ecrRepo}
        """
        println "✅ Successfully logged in to AWS ECR (${ecrRepo})"

    }catch (Exception e) {
        println "⚠️ Error: ${e.message}"
    }
}

def ensureEcrRepositoryExists(String repoName) {
    try {
        def awsRegion = env.AWS_DEFAULT_REGION  ?: "eu-west-3"
        def ecrRepoBase = env.ECR_PRIVATE_REGISTRY_URL ?: "590184116223.dkr.ecr.eu-west-3.amazonaws.com"

        echo "🔍 Checking if ECR repository '${repoName}' exists..."

        def checkRepoCmd = "aws ecr describe-repositories --repository-names ${repoName} --region ${awsRegion} 2>/dev/null"
        def checkRepoStatus = sh(script: checkRepoCmd, returnStatus: true)

        if (checkRepoStatus == 0) {
            echo "✅ ECR repository '${repoName}' already exists."
        } else {
            echo "⚠️ Repository '${repoName}' not found. Creating it now..."
            sh """
                aws ecr create-repository --repository-name ${repoName} --region ${awsRegion}
            """
            echo "🎉 Repository '${repoName}' created successfully!"
        }
    } catch (Exception e) {
        error "❌ Error: ${e.message}"
    }
}

def deleteImageWithSameTagBeforePushDocker(String awsRegion, String ecrRepoURL, String ecrRepoName, String imageTag) {
    try {
        echo "🔍 Checking if image '${ecrRepoURL}:${imageTag}' exists in ECR..."
        def imageExists = sh(
            script: "aws ecr describe-images --repository-name ${ecrRepoName} --image-ids imageTag=${imageTag} --region ${awsRegion} 2>/dev/null",
            returnStatus: true
        )

        if (imageExists == 0) {
            echo "⚠️ Image '${ecrRepoURL}:${imageTag}' already exists. Deleting..."
            sh "aws ecr batch-delete-image --repository-name ${ecrRepoName} --image-ids imageTag=${imageTag} --region ${awsRegion}"
            echo "✅ '${ecrRepoURL}:${imageTag}' image has been deleted successfully."
        } else {
            echo "✅ No existing image found. Proceeding with push."
        }

    } catch (Exception e) {
        error "❌ Error: ${e.message}"
    }
}

def createOrUpdateKubernetesDeployment(String serviceName, String imageUrl, String namespace) {
    try {
        echo "🔄 Creating/Updating Kubernetes deployment for ${serviceName}..."
        
        def deploymentYaml = """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${serviceName}-deployment
  namespace: ${namespace}
  labels:
    app: ${serviceName}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ${serviceName}
  template:
    metadata:
      labels:
        app: ${serviceName}
    spec:
      containers:
      - name: ${serviceName}
        image: ${imageUrl}
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "${params.ENVIRONMENT}"
        - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
          value: "http://erp-service-discovery-${params.ENVIRONMENT}-service:8013/eureka/"
        - name: SPRING_CLOUD_CONFIG_URI
          value: "http://erp-config-${params.ENVIRONMENT}-service:8012"
        - name: DB_URL
          value: "jdbc:mysql://mysql-${params.ENVIRONMENT}-service:3306/erp_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true"
        - name: DB_USERNAME
          value: "admin"
        - name: DB_PASSWORD
          value: "erp_password_2024"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
"""

        // Save deployment YAML to file
        writeFile file: "${serviceName}-deployment.yaml", text: deploymentYaml

        // Apply deployment
        sh "kubectl apply -f ${serviceName}-deployment.yaml"
        
        echo "✅ Deployment ${serviceName}-deployment created/updated successfully!"
        
    } catch (Exception e) {
        echo "❌ Error creating deployment: ${e.message}"
        throw e
    }
}

def createOrUpdateKubernetesService(String serviceName, String namespace) {
    try {
        echo "🔄 Creating/Updating Kubernetes service for ${serviceName}..."
        
        // Get port from service name
        def port = getServicePort(serviceName)
        
        def serviceYaml = """
apiVersion: v1
kind: Service
metadata:
  name: ${serviceName}-service
  namespace: ${namespace}
  labels:
    app: ${serviceName}
spec:
  selector:
    app: ${serviceName}
  ports:
  - port: ${port}
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
"""

        // Save service YAML to file
        writeFile file: "${serviceName}-service.yaml", text: serviceYaml

        // Apply service
        sh "kubectl apply -f ${serviceName}-service.yaml"
        
        echo "✅ Service ${serviceName}-service created/updated successfully!"
        
    } catch (Exception e) {
        echo "❌ Error creating service: ${e.message}"
        throw e
    }
}

def getServicePort(String serviceName) {
    def portMap = [
        "erp-service-discovery": 8013,
        "erp-config": 8012,
        "erp-api-gateway": 8014,
        "erp-user-service": 8055,
        "erp-product-service": 8051,
        "erp-inventory-service": 8059,
        "erp-supplier-service": 8052,
        "erp-order-service": 8053,
        "erp-client-service": 8058,
        "erp-payment-service": 8069,
        "erp-billing-service": 8057,
        "erp-sales-service": 8060,
        "erp-dashboard-service": 8065,
        "erp-scheduler-service": 8066
    ]
    
    return portMap.get(serviceName, 8080)
}

def createOrUpdateMySQL(String baseName, String namespace) {
    try {
        echo "🔄 Creating/Updating MySQL (ClusterIP) ..."
        def name = baseName
        def deploymentYaml = """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${name}-deployment
  namespace: ${namespace}
  labels:
    app: ${name}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${name}
  template:
    metadata:
      labels:
        app: ${name}
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "root"
        - name: MYSQL_DATABASE
          value: "achat_db"
        - name: MYSQL_USER
          value: "ahlem"
        - name: MYSQL_PASSWORD
          value: "achat"
        args: ["--default-authentication-plugin=mysql_native_password"]
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
"""

        def serviceYaml = """
apiVersion: v1
kind: Service
metadata:
  name: ${name}-service
  namespace: ${namespace}
  labels:
    app: ${name}
spec:
  selector:
    app: ${name}
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP
  type: ClusterIP
"""

        writeFile file: "${name}-deployment.yaml", text: deploymentYaml
        writeFile file: "${name}-service.yaml", text: serviceYaml
        sh "kubectl apply -f ${name}-deployment.yaml"
        sh "kubectl apply -f ${name}-service.yaml"
        echo "✅ MySQL deployed/updated."
    } catch (Exception e) {
        echo "❌ Error creating MySQL: ${e.message}"
        throw e
    }
}

def createOrUpdateKeycloak(String baseName, String namespace) {
    try {
        echo "🔄 Creating/Updating Keycloak (LoadBalancer) ..."
        def name = baseName
        def deploymentYaml = """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${name}-deployment
  namespace: ${namespace}
  labels:
    app: ${name}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${name}
  template:
    metadata:
      labels:
        app: ${name}
    spec:
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:24.0.3
        args: ["start-dev"]
        ports:
        - containerPort: 8080
        env:
        - name: KEYCLOAK_ADMIN
          value: "admin"
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: "passw0rd"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
"""

        def serviceYaml = """
apiVersion: v1
kind: Service
metadata:
  name: ${name}-service
  namespace: ${namespace}
  labels:
    app: ${name}
spec:
  selector:
    app: ${name}
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  type: LoadBalancer
"""

        writeFile file: "${name}-deployment.yaml", text: deploymentYaml
        writeFile file: "${name}-service.yaml", text: serviceYaml
        sh "kubectl apply -f ${name}-deployment.yaml"
        sh "kubectl apply -f ${name}-service.yaml"
        echo "✅ Keycloak deployed/updated and exposed externally."
    } catch (Exception e) {
        echo "❌ Error creating Keycloak: ${e.message}"
        throw e
    }
}
